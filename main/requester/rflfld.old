#define OH_LIB_LEVEL 3
#include "ohhelp_f.h"
!
  subroutine reflect_field(ps)
!
!   ____________________________________________________________
!
!                       S U B R O U T I N E
!                    R E F L E C T _ F I E L D
!   ____________________________________________________________
!
!   ............................................................
!   .                                                          .
!   .   subroutine to update e-field by current contribution   .
!   ............................................................
!
!-------------------- parameter and common blocks
  use oh_type
  use paramt
  use allcom
  implicit none
!
  integer(kind=4) :: i,j,k
  integer(kind=4) :: xu,yu,zu
  integer(kind=4) :: ps


!-------------------- test particle simulation
      if(juncan.ge.1000) return


!-------------------- 
      xu = sdoms(2,1,sdid(ps)+1) - sdoms(1,1,sdid(ps)+1)
      yu = sdoms(2,2,sdid(ps)+1) - sdoms(1,2,sdid(ps)+1)
      zu = sdoms(2,3,sdid(ps)+1) - sdoms(1,3,sdid(ps)+1)


!-------------------- 
      if(bounds(1,3,sdid(ps)+1).ne.1) then
        do k=-1,-1
        do j=-1,yu+1
        do i=-1,xu+1
          eb(EX,i,j,k,ps) =  eb(EX,i,j,-k  ,ps)
          eb(EY,i,j,k,ps) =  eb(EY,i,j,-k  ,ps)
          eb(EZ,i,j,k,ps) = -eb(EZ,i,j,-k-1,ps)
          eb(BX,i,j,k,ps) =  eb(BX,i,j,-k-1,ps)
          eb(BY,i,j,k,ps) =  eb(BY,i,j,-k-1,ps)
          eb(BZ,i,j,k,ps) = -eb(BZ,i,j,-k  ,ps)
        end do
        end do
        end do
      end if

!-------------------- 
      if(bounds(2,3,sdid(ps)+1).ne.1) then
        do k=zu,zu
        do j=-1,yu+1
        do i=-1,xu+1
          eb(EZ,i,j,k,ps) = -eb(EZ,i,j,zu*2-k-1,ps)
          eb(BX,i,j,k,ps) =  eb(BX,i,j,zu*2-k-1,ps)
          eb(BY,i,j,k,ps) =  eb(BY,i,j,zu*2-k-1,ps)
        end do
        end do
        end do
        do k=zu+1,zu+1
        do j=-1,yu+1
        do i=-1,xu+1
          eb(EX,i,j,k,ps) =  eb(EX,i,j,zu*2-k  ,ps)
          eb(EY,i,j,k,ps) =  eb(EY,i,j,zu*2-k  ,ps)
          eb(EZ,i,j,k,ps) = -eb(EZ,i,j,zu*2-k-1,ps)
          eb(BX,i,j,k,ps) =  eb(BX,i,j,zu*2-k-1,ps)
          eb(BY,i,j,k,ps) =  eb(BY,i,j,zu*2-k-1,ps)
          eb(BZ,i,j,k,ps) = -eb(BZ,i,j,zu*2-k  ,ps)
        end do
        end do
        end do
      end if

!-------------------- 
      if(bounds(1,2,sdid(ps)+1).ne.1) then
        do k=-1,zu+1
        do j=-1,-1
        do i=-1,xu+1
          eb(EX,i,j,k,ps) =  eb(EX,i,-j  ,k,ps)
          eb(EY,i,j,k,ps) = -eb(EY,i,-j-1,k,ps)
          eb(EZ,i,j,k,ps) =  eb(EZ,i,-j  ,k,ps)
          eb(BX,i,j,k,ps) =  eb(BX,i,-j-1,k,ps)
          eb(BY,i,j,k,ps) = -eb(BY,i,-j  ,k,ps)
          eb(BZ,i,j,k,ps) =  eb(BZ,i,-j-1,k,ps)
        end do
        end do
        end do
      end if

!-------------------- 
      if(bounds(2,2,sdid(ps)+1).ne.1) then
        do k=-1,zu+1
        do j=yu,yu
        do i=-1,xu+1
          eb(EY,i,j,k,ps) = -eb(EY,i,yu*2-j-1,k,ps)
          eb(BX,i,j,k,ps) =  eb(BX,i,yu*2-j-1,k,ps)
          eb(BZ,i,j,k,ps) =  eb(BZ,i,yu*2-j-1,k,ps)
        end do
        end do
        end do
        do k=-1,zu+1
        do j=yu+1,yu+1
        do i=-1,xu+1
          eb(EX,i,j,k,ps) =  eb(EX,i,yu*2-j  ,k,ps)
          eb(EY,i,j,k,ps) = -eb(EY,i,yu*2-j-1,k,ps)
          eb(EZ,i,j,k,ps) =  eb(EZ,i,yu*2-j  ,k,ps)
          eb(BX,i,j,k,ps) =  eb(BX,i,yu*2-j-1,k,ps)
          eb(BY,i,j,k,ps) = -eb(BY,i,yu*2-j  ,k,ps)
          eb(BZ,i,j,k,ps) =  eb(BZ,i,yu*2-j-1,k,ps)
        end do
        end do
        end do
      end if

!-------------------- 
      if(bounds(1,1,sdid(ps)+1).ne.1) then
        do k=-1,zu+1
        do j=-1,yu+1
        do i=-1,-1
          eb(EX,i,j,k,ps) = -eb(EX,-i-1,j,k,ps)
          eb(EY,i,j,k,ps) =  eb(EY,-i  ,j,k,ps)
          eb(EZ,i,j,k,ps) =  eb(EZ,-i  ,j,k,ps)
          eb(BX,i,j,k,ps) = -eb(BX,-i  ,j,k,ps)
          eb(BY,i,j,k,ps) =  eb(BY,-i-1,j,k,ps)
          eb(BZ,i,j,k,ps) =  eb(BZ,-i-1,j,k,ps)
        end do
        end do
        end do
      end if

!-------------------- 
      if(bounds(2,1,sdid(ps)+1).eq.1) then
        do k=-1,zu+1
        do j=-1,yu+1
        do i=xu,xu
          eb(EX,i,j,k,ps) = -eb(EX,xu*2-i-1,j,k,ps)
          eb(BY,i,j,k,ps) =  eb(BY,xu*2-i-1,j,k,ps)
          eb(BZ,i,j,k,ps) =  eb(BZ,xu*2-i-1,j,k,ps)
        end do
        end do
        end do
        do k=-1,zu+1
        do j=-1,yu+1
        do i=xu+1,xu+1
          eb(EX,i,j,k,ps) = -eb(EX,xu*2-i-1,j,k,ps)
          eb(EY,i,j,k,ps) =  eb(EY,xu*2-i  ,j,k,ps)
          eb(EZ,i,j,k,ps) =  eb(EZ,xu*2-i  ,j,k,ps)
          eb(BX,i,j,k,ps) = -eb(BX,xu*2-i  ,j,k,ps)
          eb(BY,i,j,k,ps) =  eb(BY,xu*2-i-1,j,k,ps)
          eb(BZ,i,j,k,ps) =  eb(BZ,xu*2-i-1,j,k,ps)
        end do
        end do
        end do
      end if


  return
  end subroutine



!
  subroutine replace_boundary_field(ps)
!
!   ____________________________________________________________
!
!                       S U B R O U T I N E
!              A D D _ B O U N D A R Y _ C U R R E N T
!   ____________________________________________________________
!
!   ............................................................
!   .                                                          .
!   .      this subroutine gives a charge distribution to      .
!   .      grid points from particle locations by the          .
!   .      "area-sharing" or "area-weighting" scheme.          .
!   ............................................................
!
!
!-------------------- parameter and common block
  use oh_type
  use paramt
  use allcom
  implicit none
!
  integer(kind=4) :: i,j,k
  integer(kind=4) :: xu,yu,zu
  integer(kind=4) :: sl,su, dl,du, nl,nu
  integer(kind=4) :: ps


!-------------------- 
      xu = sdoms(2,1,sdid(ps)+1) - sdoms(1,1,sdid(ps)+1)
      yu = sdoms(2,2,sdid(ps)+1) - sdoms(1,2,sdid(ps)+1)
      zu = sdoms(2,3,sdid(ps)+1) - sdoms(1,3,sdid(ps)+1)


!-------------------- 
      sl = ctypes(2,2,1,CAJ)	!=-2
      su = ctypes(2,1,1,CAJ)	!=+2
!
      nl = ctypes(3,2,1,CAJ)	!= 1
      nu = ctypes(3,1,1,CAJ)	!= 2
!
      dl = sl + nl		!=-1
      du = su - nu		!= 0

!-------------------- 
      if(bounds(1,3,sdid(ps)+1).eq.1) then
        do k=0,nl-1		!(i.e., do k=0,0)
        do j=0,yu+(su+nu-sl)-1	!(i.e., do j=0,yu+5)
        do i=0,xu+(su+nu-sl)-1	!(i.e., do i=0,xu+5)
          eb(EX,sl+i,sl+j,dl+k,ps) = eb(EX,sl+i,sl+j,sl+k,ps)
          eb(EY,sl+i,sl+j,dl+k,ps) = eb(EY,sl+i,sl+j,sl+k,ps)
          eb(EZ,sl+i,sl+j,dl+k,ps) = eb(EZ,sl+i,sl+j,sl+k,ps)
        end do
        end do
        end do
      end if

!-------------------- 
      if(bounds(2,3,sdid(ps)+1).eq.1) then
        do k=0,nu-1		!(i.e., do k=0,1)
        do j=0,yu+(su+nu-sl)-1	!(i.e., do j=0,yu+5)
        do i=0,xu+(su+nu-sl)-1	!(i.e., do i=0,xu+5)
          eb(EX,sl+i,sl+j,zu+du+k,ps) = eb(EX,sl+i,sl+j,zu+su+k,ps)
          eb(EY,sl+i,sl+j,zu+du+k,ps) = eb(EY,sl+i,sl+j,zu+su+k,ps)
          eb(EZ,sl+i,sl+j,zu+du+k,ps) = eb(EZ,sl+i,sl+j,zu+su+k,ps)
        end do
        end do
        end do
      end if

!-------------------- 
      if(bounds(1,2,sdid(ps)+1).eq.1) then
        do k=0,zu+(du+nu-dl)-1	!(i.e., do k=0,zu+2)
        do j=0,nl-1		!(i.e., do j=0,0)
        do i=0,xu+(su+nu-sl)-1	!(i.e., do i=0,xu+5)
          eb(EX,sl+i,dl+j,dl+k,ps) = eb(EX,sl+i,sl+j,dl+k,ps)
          eb(EY,sl+i,dl+j,dl+k,ps) = eb(EY,sl+i,sl+j,dl+k,ps)
          eb(EZ,sl+i,dl+j,dl+k,ps) = eb(EZ,sl+i,sl+j,dl+k,ps)
        end do
        end do
        end do
      end if

!-------------------- 
      if(bounds(2,2,sdid(ps)+1).eq.1) then
        do k=0,zu+(du+nu-dl)-1	!(i.e., do k=0,zu+2)
        do j=0,nu-1		!(i.e., do j=0,1)
        do i=0,xu+(su+nu-sl)-1	!(i.e., do i=0,xu+5)
          eb(EX,sl+i,yu+du+j,dl+k,ps) = eb(EX,sl+i,yu+su+j,dl+k,ps)
          eb(EY,sl+i,yu+du+j,dl+k,ps) = eb(EY,sl+i,yu+su+j,dl+k,ps)
          eb(EZ,sl+i,yu+du+j,dl+k,ps) = eb(EZ,sl+i,yu+su+j,dl+k,ps)
        end do
        end do
        end do
      end if

!-------------------- 
      if(bounds(1,1,sdid(ps)+1).eq.1) then
        do k=0,zu+(du+nu-dl)-1	!(i.e., do k=0,zu+2)
        do j=0,yu+(du+nu-dl)-1	!(i.e., do j=0,yu+2)
        do i=0,nl-1		!(i.e., do i=0,0)
          eb(EX,dl+i,dl+j,dl+k,ps) = eb(EX,sl+i,dl+j,dl+k,ps)
          eb(EY,dl+i,dl+j,dl+k,ps) = eb(EY,sl+i,dl+j,dl+k,ps)
          eb(EZ,dl+i,dl+j,dl+k,ps) = eb(EZ,sl+i,dl+j,dl+k,ps)
        end do
        end do
        end do
      end if

!-------------------- 
      if(bounds(2,1,sdid(ps)+1).eq.1) then
        do k=0,zu+(du+nu-dl)-1	!(i.e., do k=0,zu+2)
        do j=0,yu+(du+nu-dl)-1	!(i.e., do j=0,yu+2)
        do i=0,nu-1		!(i.e., do i=0,1)
          eb(EX,xu+du+i,dl+j,dl+k,ps) = eb(EX,xu+su+i,dl+j,dl+k,ps)
          eb(EY,xu+du+i,dl+j,dl+k,ps) = eb(EY,xu+su+i,dl+j,dl+k,ps)
          eb(EZ,xu+du+i,dl+j,dl+k,ps) = eb(EZ,xu+su+i,dl+j,dl+k,ps)
        end do
        end do
        end do
      end if


  return
  end subroutine
